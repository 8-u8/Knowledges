microbenchmark(`^`(2,3))  # work
microbenchmark(`*`(`*`(2,2),2))
`custom_power` <- function(e1, e2){
x <- e1
for(i in 1:e2){
out <- `*`(x, e1)
}
return(out)
}
custom_power(2,3)
`custom_power` <- function(e1, e2){
x <- e1
while(i==e2){
out <- `*`(x, e1)
i <- `+`(i,1)
}
return(out)
}
custom_power(2,3)
`custom_power` <- function(e1, e2){
x <- e1
i <- 1
while(i==e2){
out <- `*`(x, e1)
i <- `+`(i,1)
}
return(out)
}
custom_power(2,3)
`custom_power` <- function(e1, e2){
x <- e1
i <- 1
out <- NA
while(i==e2){
out <- `*`(x, e1)
i <- `+`(i,1)
}
return(out)
}
custom_power(2,3)
out <- NA
`custom_power` <- function(e1, e2){
x <- e1
i <- 1
out <- NA
while(i<=e2){
out <- `*`(x, e1)
i <- `+`(i,1)
}
return(out)
}
custom_power(2,3)
`custom_power` <- function(e1, e2){
x <- e1
i <- 1
out <- NA
while(i<=e2){
out <- `*`(x, e1)
i <- `+`(i,1)
print(i)
}
return(out)
}
custom_power(2,3)
`custom_power` <- function(e1, e2){
x <- e1
i <- 1
out <- NA
while(i<=e2){
out <- `*`(x, e1)
i <- `+`(i,1)
print(i)
print(out)
}
return(out)
}
custom_power(2,3)
`custom_power` <- function(e1, e2){
x <- e1
i <- 1
out <- NA
while(i<=e2){
out <- `*`(x, e1)
i <- `+`(i,1)
#print(i)
print(out)
}
return(out)
}
custom_power(2,3)
`custom_power` <- function(e1, e2){
x <- e1
i <- 1
out <- NA
while(i<=e2){
out <- `*`(out, e1)
i <- `+`(i,1)
#print(i)
print(out)
}
return(out)
}
custom_power(2,3)
`custom_power` <- function(e1, e2){
x <- e1
i <- 1
while(i<=e2){
x <- `*`(x, e1)
i <- `+`(i,1)
#print(i)
print(x)
}
return(x)
}
custom_power(2,3)
`custom_power` <- function(e1, e2){
x <- e1
i <- 1
while(i<e2){
x <- `*`(x, e1)
i <- `+`(i,1)
#print(i)
print(x)
}
return(x)
}
custom_power(2,3)
`custom_power` <- function(e1, e2){
x <- e1
i <- 1
while(i<e2){
x <- `*`(x, e1)
i <- `+`(i,1)
# print(i)
# print(x)
}
return(x)
}
microbenchmark(2^3)
microbenchmark(2**3)
microbenchmark(`^`(2,3))  # work
microbenchmark(`*`(`*`(2,2),2))
microbenchmark(custom_power(2,3))
microbenchmark(custom_power(2,3))
microbenchmark(`*`(`*`(2,2),2))
sum
.Internal(sum)
.Internal("sum")
`*`
sum()
sum
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(roxygen2)
usethis::create_project()
usethis::create_project(path = "./new_project")
devtools::install_github("8-u8/R_packages/pipelineR")
devtools::install_github("8-u8/R_packages/pipelineR", dependencies = TRUE)
devtools::install_github("8-u8/R_packages/pipelineR")
devtools::install_github("8-u8/R_packages/pipelineR")
library(pipelineR)
devtools::install_github("8-u8/R_packages/pipelineR")
?install.packages
y <- rnorm(200, mean = 1, sd = 1)
x <- y + rnorm(200, mean = mean(y), sd = 200)
plot(x,y)
x <- y + rnorm(200, mean = mean(y), sd = 20)
plot(x,y)
x <- y + rnorm(200, mean = mean(y), sd = 2)
plot(x,y)
x <- matrix((y + rnorm(200*10, mean = mean(y), sd = 2),),200,10)
y <- rnorm(200, mean = 1, sd = 1)
x <- matrix((y + rnorm(200*10, mean = mean(y), sd = 2)),200,10)
plot(x,y)
plot(x[,1],y)
plot(x[,2],y)
cor(x[,1], y)
y_2 <- rbinom(200, 50, 0.5)
y_2 <- rbinom(200, 1, 0.5)
y_1 <- rnorm(200, mean = 1, sd = 1)
y_2 <- rbinom(200, 1, mean(y_1)/max(y_1))
x <- matrix((y + rnorm(200*10, mean = mean(y), sd = 2)),200,10)
y_1 <- rnorm(200, mean = 1, sd = 1)
y_2 <- rbinom(200, 1, mean(y_1)/max(y_1))
x <- matrix((y + rnorm(200*10, mean = mean(y), sd = 2)),200,10)
usedata <- data.frame(y_1, y_2, x)
devtools::install_github("8-u8/R_packages/pipelineR", )
x <- rnorm(100,0,1)
y <- rnorm(100,1,1)
dist(x,y)
x <- matrix(x,10,10)
y <- matrix(y,10,10)
dist(x,y)
dist(x,y, method = "euclidean")
dist(x,y, method = "euclidean")
x <- rnorm(100,0,1)
y <- rnorm(100,1,1)
dist(x,y, method = "euclidean")
x <- rnorm(10,0,1)
y <- rnorm(10,1,1)
dist(x,y, method = "euclidean")
x <- matrix(rnorm(100,0,1),10,10)
y <- matrix(rnorm(50,1,1),10,5)
dist(x,y, method = "euclidean")
dist(x,y, method = "euclidean")
x <- rnorm(10,0,1)
y <- rnorm(10,1,1)
dist(x,y, method = "euclidean")
sum((x-y)^2)
((x[1]-y[1])^2)
sqrt((x[1]-y[1])^2)
sqrt(sum((x-y)^2))
x <- matrix(rnorm(100,0,1),10,10)
y <- matrix(rnorm(50,1,1),10,5)
dist(x,y, method = "euclidean")
x-y
# 10 dim vector
x <- rnorm(10,0,1)
y <- rnorm(10,1,1)
x-y
(x-y)^2 # vector
sum((x-y)^2) # scholar
sqrt(sum((x-y)^2)) # scholar
x <- matrix(rnorm(100,0,1),10,10)
y <- matrix(rnorm(50,1,1),10,5)
x-y
for(i in 1:ncol(y)){
print(head(x-y[i]))
}
for(i in 1:ncol(y)){
print("a")
print(head(x-y[i]))
}
x - y[1]
x - y[2]
x
x-y[1]
x[1,]-y
x[1,]-y[1]
x-y[1]
x[2]-y[1]
x[2,]-y[1]
x[3,]-y[1]
for(i in 1:ncol(y)){
mid <- (x - y[i])
dist_value <- apply(mid, 1, sum)
}
dist_value
for(i in 1:ncol(y)){
out <- matrix(0, nrow(x), ncol(y))
mid <- (x - y[i])
dist_value <- apply(mid, 1, sum)
out[,i] <-dist_value
}
View(out)
out <- matrix(0, nrow(x), ncol(y))
for(i in 1:ncol(y)){
mid <- (x - y[i])
dist_value <- apply(mid, 1, sum)
out[,i] <-dist_value
}
View(mid)
c(100:1)
x <- matrix(c(1:100),10,10)
y <- matrix(c(50:1),10,5)
out <- matrix(0, nrow(x), ncol(y))
for(i in 1:ncol(y)){
mid <- (x - y[i])
dist_value <- apply(mid, 1, sum)
out[,i] <-dist_value
}
View(mid)
View(out)
x <- matrix(c(1:100),10,10)
y <- matrix(c(50:1),10,5)
out <- matrix(0, nrow(x), ncol(y))
for(i in 1:ncol(y)){
mid <- (x - y[i])^2
dist_value <- apply(mid, 1, sum)
out[,i] <-dist_value
}
x <- matrix(c(1:100),10,10)
y <- matrix(c(50:1),10,5)
out <- matrix(0, nrow(x), ncol(y))
for(i in 1:ncol(y)){
mid <- (x - y[i])^2
dist_value <- apply(mid, 1, function(x){sqrt(sum(x))})
out[,i] <-dist_value
}
View(out)
View(y)
x <- matrix(c(1:100),10,10)
y <- matrix(c(50:1),5,10)
out <- matrix(0, nrow(x), ncol(y))
for(i in 1:ncol(y)){
mid <- (x - y[i])^2
dist_value <- apply(mid, 1, function(x){sqrt(sum(x))})
out[,i] <-dist_value
}
View(out)
for(i in 1:nrow(y)){
mid <- (x - y[i,])^2
dist_value <- apply(mid, 1, function(x){sqrt(sum(x))})
out[,i] <-dist_value
}
x <- matrix(c(1:100),10,10)
y <- matrix(c(50:1),5,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- (x - y[i,])^2
dist_value <- apply(mid, 1, function(x){sqrt(sum(x))})
out[,i] <-dist_value
}
View(out)
for(i in 1:nrow(y)){
mid <- (x - y[i,])^2
dist_value <- apply(mid, 1, function(m){sqrt(sum(m))})
out[,i] <-dist_value
}
x <- data.frame(matrix(c(1:100),10,10))
y <- data.frame(matrix(c(50:1),5,10))
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- (x - y[i,])^2
dist_value <- apply(mid, 1, function(m){sqrt(sum(m))})
out[,i] <-dist_value
}
x <- data.frame(matrix(c(1:100),10,10))
y <- data.frame(matrix(c(50:1),5,10))
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- (x - y[i,])^2
dist_value <- apply(mid, 2, function(m){sqrt(sum(m))})
out[,i] <-dist_value
}
x <- matrix(c(1:100),10,10)
y <- matrix(c(50:1),5,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- (x - y[i,])^2
dist_value <- apply(mid, 2, function(m){sqrt(sum(m))})
out[,i] <-dist_value
}
View(out)
x <- matrix(c(1:100),10,10)
y <- matrix(c(50:1),5,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- (x - y[i,])
dist_value <- apply(mid, 2, function(m){sqrt(sum(m))})
out[,i] <-dist_value
}
for(i in 1:nrow(y)){
mid <- (x - y[i,])
dist_value <- apply(mid, 2, function(m){return(m)})
out[,i] <-dist_value
}
x <- matrix(c(1:100),10,10)
y <- matrix(c(50:1),5,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- (x - y[i,])
dist_value <- apply(mid, 2, function(m){return(m)})
out[,i] <-dist_value
}
for(i in 1:nrow(y)){
mid <- (x - y[i,])
dist_value <- apply(mid, 1, function(m){return(m)})
out[,i] <-dist_value
}
x <- matrix(c(1:100),10,10)
y <- matrix(c(50:1),5,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- (x - y[i,])
dist_value <- apply(mid, 1, sum)
out[,i] <-dist_value
}
View(out)
View(mid)
View(x)
View(y)
x
y
x-y[1,]
y <- matrix(c(1:50),5,10)
x-y[1,]
x
y
x <- matrix(c(1:100),10,10)
y <- matrix(c(1:100),10,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- (x - y[i,])
dist_value <- apply(mid, 1, sum)
out[,i] <-dist_value
}
View(out)
View(mid)
x <- matrix(c(1:100),10,10)
y <- matrix(c(1:100),10,10)
x
y
x-y
x-y[1,]
y[1,]
x
x-c(1:10)
x
x-c(1:10)
x[1,]-c(1:10)
apply(x, 1, function(x){x-c(1:10)})
apply(x, 2, function(x){x-c(1:10)})
apply(x, 1, function(x){x-c(1:10)})
apply(x, 1, function(x){x-rep(1,10)})
x
apply(x, 1, function(x){x-(rep(1,10))})
t(apply(x, 1, function(x){x-(rep(1,10))}))
x
x <- matrix(c(1:100),10,10)
y <- matrix(c(1:50),5,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- t(apply(x, 1, function(m){m - y[i,]}))#(x - y[i,])
dist_value <- apply(mid, 1, sum)
out[,i] <-dist_value
}
View(out)
x <- matrix(c(1:1000),100,10)
y <- matrix(c(1:50),5,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- t(apply(x, 1, function(m){m - y[i,]}))#(x - y[i,])
dist_value <- apply(mid, 1, sum)
out[,i] <-dist_value
}
View(out)
x <- matrix(c(0:999),100,10)
y <- matrix(c(0:49),5,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- t(apply(x, 1, function(m){m - y[i,]}))#(x - y[i,])
dist_value <- apply(mid, 1, sum)
out[,i] <-dist_value
}
View(mid)
x <- matrix(c(0:99),10,10)
y <- matrix(c(0:99),10,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- t(apply(x, 1, function(m){m - y[i,]}))#(x - y[i,])
dist_value <- apply(mid, 1, sum)
out[,i] <-dist_value
}
View(out)
for(i in 1:nrow(y)){
mid <- t(apply(x, 1, function(m){(m - y[i,])^2}))#(x - y[i,])
dist_value <- apply(mid, 1, function(l){sqrt(sum(l))})
out[,i] <-dist_value
}
x <- matrix(c(0:99),10,10)
y <- matrix(c(0:99),10,10)
out <- matrix(0, nrow(x), nrow(y))
for(i in 1:nrow(y)){
mid <- t(apply(x, 1, function(m){(m - y[i,])^2}))#(x - y[i,])
dist_value <- apply(mid, 1, function(l){sqrt(sum(l))})
out[,i] <-dist_value
}
View(out)
myfunc <- function(x){
x <- x+3
}
myfunc <- function(x){
x <- x+3
}
formals(myfunc)
myfunc <- function(x = 5){
x <- x+3
}
myfunc()
myfunc <- function(x = 5){
x <- x+3
return(x)
}
myfunc()
myfunc <- function(x = 5){
y <- x+3
return(y)
}
myfunc()
formals(myfunc)$x <- 2
formals(myfunc)
myfunc()
formals(write)
a <- formals(write)
a$file
a$file <- "data/a"
formals(write)
formals(write)
formals(write.csv)
formals(write.csv)$file
formals(write.csv)$...
?write.csv
?write_csv
??write_csv
formals(readr::write_delim)
getwd()
setwd("./Desktop/Knowledges/Impractical_Python")
for(i in 1:16){mkdir(paste0("./chapter_",i))}
for(i in 1:16){dir.create(paste0("./chapter_",i))}
